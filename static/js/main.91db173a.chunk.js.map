{"version":3,"sources":["logo.svg","Btc/Btc.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Btc","state","btcusd","last_updated","price_change","price_sign","last_price","this","timerID","setInterval","getBtcInfo","clearInterval","axios","get","then","response","current_price","data","USD","last","setState","latest_price","change","parseFloat","toFixed","sign","console","log","curr_date","moment","local","format","catch","error","className","React","Component","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.91db173a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './Btc.css'\r\nimport axios from 'axios'\r\nimport moment from 'moment';\r\n\r\nclass Btc extends React.Component {\r\n    // Adds a class constructor that assigns the initial state values:\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            btcusd: '<getting info...>',\r\n            last_updated: '',\r\n            price_change: 0,\r\n            price_sign: ''\r\n        };\r\n        this.last_price = null;\r\n        this.price_change = 0;\r\n    }//constructor\r\n\r\n    componentDidMount() {\r\n        // console.log(\"Mount\");\r\n        this.timerID = setInterval(\r\n            () => this.getBtcInfo(),\r\n            1000\r\n        );// timer , 1 sec\r\n        // console.log(\">>\"+this.timerID);\r\n    }//componentDidMount\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.timerID);\r\n    }//componentWillUnmount\r\n\r\n    getBtcInfo() {\r\n        axios.get(\"https://blockchain.info/ticker\")\r\n            .then(response => {\r\n                let current_price = response.data.USD.last;\r\n\r\n                this.setState({ latest_price: current_price });\r\n                this.setState({ btcusd: current_price });\r\n\r\n                if (this.last_price) {\r\n                    let change = parseFloat(current_price) - parseFloat(this.last_price);\r\n                    if (change !== 0) {\r\n                        this.setState({ price_change: change.toFixed(2) });\r\n                        let sign = (change > 0) ? '+' : '';\r\n                        this.setState({ price_sign: sign });\r\n                    }//if (change !== 0)                \r\n                    console.log(this.price_change);\r\n                    console.log(this.last_price);\r\n                }//if (this.last_price)\r\n\r\n                this.last_price = current_price;\r\n\r\n                let curr_date = moment().local().format('YYYY-MM-DD HH:mm:ss');\r\n                this.setState({ last_updated: curr_date });\r\n            })\r\n            // Catch any error here\r\n            .catch(error => {\r\n                console.log(error)\r\n                this.setState({ btcusd: this.state.btcusd });\r\n            })// axios.get    \r\n    }//getBtcInfo()\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"divTable darkTable\">\r\n                <div className=\"divTableBody\">\r\n                    <div className=\"divTableRow\">\r\n                        <div className=\"divTableCell\">BTC/USD:</div><div className=\"divTableCell\">${this.state.btcusd}</div>\r\n                    </div>\r\n                    <div className=\"divTableRow\">\r\n                        <div className=\"divTableCell\">Change:</div><div className=\"divTableCell\">{this.state.price_sign}{this.state.price_change}</div>\r\n                    </div>\r\n                    <div className=\"divTableRow\">\r\n                        <div className=\"divTableCell\">Last updated:</div><div className=\"divTableCell\">{this.state.last_updated}</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }//render\r\n}//Btc class\r\n\r\nexport default Btc;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Online, Offline } from \"react-detect-offline\";\nimport Btc from './Btc/Btc'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          Real Time BTC tracker from blockchain.info\n        </p>\n        <div>\n          You are <Online>online</Online><Offline>offline</Offline>\n        </div>\n        <Btc />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}